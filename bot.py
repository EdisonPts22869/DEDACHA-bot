import logging
import json
import os
import signal
import sys
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    JobQueue,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã
DATA_FILE = "data.json"
LOG_FILE = "admin_log.txt"
BACKUP_DIR = "backups"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
os.makedirs(BACKUP_DIR, exist_ok=True)

# üî¥ –£–ö–ê–ñ–ò –°–í–û–ô ID –ó–î–ï–°–¨
ADMIN_IDS = [5043175452]  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID!

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
def log_admin_action(admin_id, action):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] –ê–¥–º–∏–Ω {admin_id}: {action}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_entry)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json: {e}")
        if os.path.exists(DATA_FILE):
            os.rename(DATA_FILE, DATA_FILE + ".bak")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ë—ç–∫–∞–ø
def create_backup():
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = os.path.join(BACKUP_DIR, f"backup_{timestamp}.json")
    try:
        data = load_data()
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        log_admin_action("SYSTEM", f"–±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø
async def backup_job(context: ContextTypes.DEFAULT_TYPE):
    create_backup()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = load_data()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_balances = data.get("balances", {})
user_upgrades = data.get("upgrades", {})
user_passive_last = data.get("passive_last", {})
used_promocodes = data.get("used_promocodes", {})  # {user_id: {promo_name: True}}
active_promocodes = data.get("active_promocodes", {
    "DEDACHA": {"reward": 50.0, "limit": 5, "used": 0}
})
daily_rewards = data.get("daily_rewards", {})
referrals = data.get("referrals", {})
referral_count = data.get("referral_count", {})
user_states = {}  # {user_id: —Å–æ—Å—Ç–æ—è–Ω–∏–µ}

# –ú–∞–≥–∞–∑–∏–Ω
SHOP_ITEMS = {
    "shovel": {"name": "–õ–æ–ø–∞—Ç–∞", "price": 100.0, "type": "click", "value": 0.010},
    "fishing_rod": {"name": "–£–¥–æ—á–∫–∞", "price": 200.0, "type": "passive", "value": 1.0},
    "greenhouse": {"name": "–¢–µ–ø–ª–∏—Ü–∞", "price": 500.0, "type": "click", "value": 0.050},
}

def save_all():
    data["balances"] = user_balances
    data["upgrades"] = user_upgrades
    data["passive_last"] = user_passive_last
    data["used_promocodes"] = used_promocodes
    data["active_promocodes"] = active_promocodes
    data["daily_rewards"] = daily_rewards
    data["referrals"] = referrals
    data["referral_count"] = referral_count
    save_data(data)

def get_click_multiplier(user_id):
    total = 0.050
    upgrades = user_upgrades.get(user_id, {})
    for item_id, count in upgrades.items():
        if SHOP_ITEMS[item_id]["type"] == "click":
            total += SHOP_ITEMS[item_id]["value"] * count
    return total

def calculate_passive_income(user_id):
    now = datetime.now()
    last_time = user_passive_last.get(user_id)
    if not last_time:
        user_passive_last[user_id] = now.isoformat()
        save_all()
        return 0.0
    try:
        last = datetime.fromisoformat(last_time)
    except:
        last = now
    minutes = (now - last).total_seconds() // 60
    income = 0.0
    rods = user_upgrades.get(user_id, {}).get("fishing_rod", 0)
    income = rods * 1.0 * minutes
    user_passive_last[user_id] = now.isoformat()
    return income

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_balances:
        user_balances[user_id] = 0.0
        user_upgrades[user_id] = {}
        user_passive_last[user_id] = datetime.now().isoformat()
        used_promocodes[user_id] = {}
        daily_rewards[user_id] = None
        save_all()

    passive = calculate_passive_income(user_id)
    if passive > 0:
        user_balances[user_id] += passive
        await update.message.reply_text(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–∞—Å—Å–∏–≤–∞: {passive:.0f} –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤")

    keyboard = [
        [InlineKeyboardButton("‚õè –ö–ª–∏–∫!", callback_data="click")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")],
        [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="daily")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¥–∞—á—É! üåø", reply_markup=reply_markup)
    save_all()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if user_id not in user_balances:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
        return

    data = query.data

    if data == "click":
        amount = get_click_multiplier(user_id)
        user_balances[user_id] += amount
        await query.edit_message_text(
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount:.3f} –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤!\n"
            f"–ë–∞–ª–∞–Ω—Å: {user_balances[user_id]:.3f}",
            reply_markup=query.message.reply_markup
        )
        save_all()

    elif data == "profile":
        balance = user_balances[user_id]
        await query.edit_message_text(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.3f} –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
            ]])
        )

    elif data == "promo":
        user_states[user_id] = "awaiting_promo"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        await query.delete_message()

    elif data == "shop":
        keyboard = [
            [InlineKeyboardButton(
                f"{item['name']} ‚Äî {item['price']} ü™ô",
                callback_data=f"buy_{k}"
            )] for k, item in SHOP_ITEMS.items()
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõí –ú–∞–≥–∞–∑–∏–Ω:", reply_markup=reply_markup)

    elif data.startswith("buy_"):
        item_id = data.replace("buy_", "")
        item = SHOP_ITEMS.get(item_id)
        if not item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if user_balances[user_id] < item["price"]:
            await query.answer("‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return
        user_balances[user_id] -= item["price"]
        user_upgrades.setdefault(user_id, {})
        user_upgrades[user_id][item_id] = user_upgrades[user_id].get(item_id, 0) + 1
        await query.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['name']}")
        await button_handler(update, context)
        save_all()

    elif data == "daily":
        today = datetime.now().strftime("%Y-%m-%d")
        if daily_rewards.get(user_id) == today:
            await query.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É!", show_alert=True)
        else:
            user_balances[user_id] += 10.0
            daily_rewards[user_id] = today
            await query.answer("üéâ –ü–æ–ª—É—á–µ–Ω–æ 10 –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤!", show_alert=True)
            await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
            save_all()

    elif data == "back":
        keyboard = [
            [InlineKeyboardButton("‚õè –ö–ª–∏–∫!", callback_data="click")],
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")],
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="daily")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ú–µ–Ω—é –¥–∞—á–∏ üåø", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = [
        [InlineKeyboardButton("üíµ –í—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã", callback_data="admin_give")],
        [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_create_promo")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_delete_promo")],
        [InlineKeyboardButton("üìã –ò–≥—Ä–æ–∫–∏", callback_data="admin_list")],
        [InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data="admin_logs")],
        [InlineKeyboardButton("üîÑ –†—É—á–Ω–æ–π –±—ç–∫–∞–ø", callback_data="admin_backup")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫
async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    await query.answer()

    data = query.data

    if data == "admin_give":
        user_states[user_id] = "admin_give"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: ID —Å—É–º–º–∞\n–ü—Ä–∏–º–µ—Ä: 123456789 100")

    elif data == "admin_broadcast":
        user_states[user_id] = "admin_broadcast"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

    elif data == "admin_create_promo":
        user_states[user_id] = "admin_create_promo"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: –ò–ú–Ø –°–£–ú–ú–ê –õ–ò–ú–ò–¢\n–ü—Ä–∏–º–µ—Ä: –ù–û–í–´–ô–ì–û–î 100 5")

    elif data == "admin_delete_promo":
        user_states[user_id] = "admin_delete_promo"
        promos = "\n".join(
            f"‚Ä¢ {name} ‚Äî {info['reward']} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {info['used']}/{info['limit']})"
            for name, info in active_promocodes.items()
        )
        await query.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n{promos or '–ù–µ—Ç'}\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    elif data == "admin_list":
        players = "\n".join([f"ID {uid}: {bal:.1f}" for uid, bal in user_balances.items()])
        await query.message.reply_text(f"üìã –ò–≥—Ä–æ–∫–∏:\n{players or '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤'}")

    elif data == "admin_logs":
        logs = open(LOG_FILE, "r", encoding="utf-8").read()[-2000:] if os.path.exists(LOG_FILE) else "–õ–æ–≥–∏ –ø—É—Å—Ç—ã."
        await query.message.reply_text(f"üìÑ –õ–æ–≥–∏:\n\n{logs}")

    elif data == "admin_backup":
        create_backup()
        await query.message.reply_text("‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é!")

    else:
        await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ê–¥–º–∏–Ω: –≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã
    if user_id in ADMIN_IDS and user_id in user_states:
        state = user_states[user_id]

        if state == "admin_give":
            try:
                target_id, amount = map(float, text.split())
                target_id = int(target_id)
                if target_id not in user_balances:
                    user_balances[target_id] = 0.0
                    user_upgrades[target_id] = {}
                    user_passive_last[target_id] = datetime.now().isoformat()
                    used_promocodes[target_id] = {}
                user_balances[target_id] += amount
                await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                log_admin_action(user_id, f"–≤—ã–¥–∞–ª {amount} ‚Üí {target_id}")
                save_all()
            except:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: ID —Å—É–º–º–∞")
            finally:
                del user_states[user_id]

        elif state == "admin_broadcast":
            sent = 0
            for uid in user_balances:
                try:
                    await context.bot.send_message(chat_id=uid, text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{text}")
                    sent += 1
                except:
                    pass
            await update.message.reply_text(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞: {sent} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            log_admin_action(user_id, f"—Ä–∞—Å—Å—ã–ª–∫–∞: {text}")
            del user_states[user_id]

        elif state == "admin_create_promo":
            try:
                name, amount, limit = text.split()
                amount, limit = float(amount), int(limit)
                if name in active_promocodes:
                    await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å.")
                else:
                    active_promocodes[name] = {"reward": amount, "limit": limit, "used": 0}
                    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{name}' —Å–æ–∑–¥–∞–Ω: {amount} (–ª–∏–º–∏—Ç: {limit})")
                    log_admin_action(user_id, f"—Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ '{name}' –Ω–∞ {amount}, –ª–∏–º–∏—Ç {limit}")
                    save_all()
            except:
                await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –ò–ú–Ø –°–£–ú–ú–ê –õ–ò–ú–ò–¢\n–ü—Ä–∏–º–µ—Ä: –°–£–ü–ï–† 50 3")
            finally:
                del user_states[user_id]

        elif state == "admin_delete_promo":
            if text in active_promocodes:
                del active_promocodes[text]
                await update.message.reply_text(f"üóë –ü—Ä–æ–º–æ–∫–æ–¥ '{text}' —É–¥–∞–ª—ë–Ω.")
                log_admin_action(user_id, f"—É–¥–∞–ª–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ '{text}'")
                save_all()
            else:
                await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            del user_states[user_id]
            return

    # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø—Ä–æ–º–æ–∫–æ–¥—ã
    elif user_id in user_states and user_states[user_id] == "awaiting_promo":
        if text in active_promocodes:
            promo = active_promocodes[text]
            if promo["used"] >= promo["limit"]:
                await update.message.reply_text("‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.")
            elif text in used_promocodes.get(user_id, {}):
                await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            else:
                amount = promo["reward"]
                user_balances[user_id] += amount
                used_promocodes.setdefault(user_id, {})[text] = True
                active_promocodes[text]["used"] += 1
                await update.message.reply_text(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ '{text}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ: {amount} –î–∞—á–∞-–∫–æ–∏–Ω–æ–≤.")
                log_admin_action("SYSTEM", f"–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª '{text}'")
                save_all()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        del user_states[user_id]
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# === –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê –ü–û Ctrl+C ===
def signal_handler(signum, frame):
    print("\n\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)  # –õ–æ–≤–∏–º Ctrl+C

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = "7587434641:AAE6J4xmeB3uxvvFSHi81TJn9BYiLCVX23I"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

    job_queue = JobQueue()

    application = Application.builder().token(TOKEN).job_queue(job_queue).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤
    application.job_queue.run_once(backup_job, 1)
    application.job_queue.run_repeating(backup_job, interval=24*3600, first=24*3600)

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^admin_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ KeyboardInterrupt.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()